name: Deploy/Destroy AzureRM resources 

on:
  push:
    branches:
        - main
    paths:
        - 'terraform/**'
  workflow_dispatch:
    inputs:
        action_type:
            description: 'Manually Apply/Destroy Resources'
            required: false
            default: 'apply'
            type: choice
            options:
                - 'apply'
                - 'destroy'

env: 
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      WORKING_DIR: ./terraform/

jobs:
  dev_stage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Terraform init
        id: init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init
      
      - name: Terraform workspace select or create dev
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform plan
        id: plan
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform plan -out=main.tfplan

      - name: Terraform apply
        if: github.event.inputs.action_type != 'destroy'
        id: apply
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform apply "main.tfplan"
        
      - name: Terraform destroy
        if: github.event.inputs.action_type == 'destroy'
        id: destroy
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform destroy -auto-approve
  
  stage_prod:
    needs: dev_stage
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Terraform init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init

      - name: Terraform workspace select or create stage
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform workspace select stage || terraform workspace new stage
      
      - name: Terraform plan
        id: plan
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform plan -out=main.tfplan
      
      - name: Terraform apply
        if: github.event.inputs.action_type != 'destroy'
        id: apply
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform apply "main.tfplan"
        
      - name: Terraform destroy
        if: github.event.inputs.action_type == 'destroy'
        id: destroy
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform destroy -auto-approve
  
  prod:
    needs: stage_prod
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.get_web_endpoint.outputs.WEB_ENDPOINT }}

    steps:
      - uses: actions/checkout@v4

      - name: Terraform init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init

      - name: Terraform workspace select or create prod
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform workspace select stage || terraform workspace new stage
      
      - name: Terraform plan
        id: plan
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform plan -out=main.tfplan
      
      - name: Terraform apply
        if: github.event.inputs.action_type != 'destroy'
        id: apply
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform apply "main.tfplan"

      - name: Terraform destroy
        if: github.event.inputs.action_type == 'destroy'
        id: destroy
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform destroy -auto-approve

      - name: Get Web Endpoint
        id: get_web_endpoint
        run: echo "WEB_ENDPOINT=$(terraform output -raw primary_web_endpoint)" 
        working-directory: ${{ env.WORKING_DIR }}
      

    

      

